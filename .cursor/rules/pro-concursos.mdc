---
description: Regras espec√≠ficas para desenvolvimento e manuten√ß√£o do sistema PRO Concursos
alwaysApply: false
---
# PRO Concursos - Regras de Desenvolvimento

## üéØ **Contexto do Sistema**

O PRO Concursos √© uma plataforma de estudos para concursos p√∫blicos composta por:
- **pro-frontend**: Interface web principal (saladeestudos.html)
- **pro-backend**: Servidor backend
- **pro-questoes**: Sistema de quest√µes (questoes.proconcursos.com.br)
- **PRO_Import_System**: Sistema local de importa√ß√£o de conte√∫do
- **Firebase Storage**: Armazenamento de aulas, metadados e quest√µes

## üìã **Regras de Desenvolvimento**

### **1. Arquitetura e Estrutura**
- **SEMPRE** responder em portugu√™s brasileiro
- **NUNCA** criar arquivos desnecess√°rios - prefira editar existentes
- **SEMPRE** manter compatibilidade com sistema de isolamento CSS (Fases 1-5)
- **SEMPRE** preservar funcionalidades existentes ao fazer modifica√ß√µes
- **NUNCA** criar arquivos teste para o usuario - TODOS OS TESTES SAO PUBLICADOS POR PUSH NO GITHUB para teste real (IA pode testar e deletar arquivos de teste caso queira)

### **2. Sistema de Carregamento Din√¢mico**
- **SEMPRE** usar Shadow DOM para isolamento de conte√∫do
- **SEMPRE** implementar fallback para modo tradicional
- **SEMPRE** usar ResourceCache para otimiza√ß√£o de performance
- **SEMPRE** sanitizar HTML antes da exibi√ß√£o
- **NUNCA** quebrar o fluxo: Cursos ‚Üí M√≥dulos ‚Üí Aulas ‚Üí Quest√µes

### **3. Integra√ß√£o com Firebase**
- **SEMPRE** tratar URLs do Firebase Storage (gs://) adequadamente
- **SEMPRE** implementar fallback para URLs p√∫blicas
- **SEMPRE** manter cache de conte√∫do para performance
- **SEMPRE** preservar metadados de cursos/m√≥dulos/aulas

### **4. CSS e Estilos**
- **SEMPRE** usar vari√°veis CSS do sistema (--main-color, --accent-1, etc.)
- **SEMPRE** manter compatibilidade com modo escuro
- **SEMPRE** usar core-styles.css como base
- **NUNCA** interferir com estilos dos arquivos de conte√∫do isolados

### **5. JavaScript e Funcionalidades**
- **SEMPRE** manter compatibilidade com Mermaid.js
- **SEMPRE** preservar interatividade de tabelas
- **SEMPRE** manter sistema de notifica√ß√µes
- **SEMPRE** implementar tratamento de erros robusto

### **6. Performance e Otimiza√ß√£o**
- **SEMPRE** usar cache inteligente (ResourceCache)
- **SEMPRE** implementar lazy loading quando apropriado
- **SEMPRE** otimizar carregamento de recursos externos
- **SEMPRE** manter logs informativos para debug

### **7. Acessibilidade e UX**
- **SEMPRE** manter navega√ß√£o por teclado
- **SEMPRE** preservar indicadores visuais de carregamento
- **SEMPRE** manter responsividade
- **SEMPRE** implementar feedback visual para a√ß√µes do usu√°rio

## üîß **Padr√µes de C√≥digo**

### **Classes e M√©todos**
```javascript
// SEMPRE usar coment√°rios descritivos
class NomeDaClasse {
    constructor() {
        // Inicializa√ß√£o clara
    }
    
    /**
     * M√©todo com documenta√ß√£o JSDoc
     * @param {string} param - Descri√ß√£o do par√¢metro
     * @returns {Promise<Object>} Descri√ß√£o do retorno
     */
    async metodoExemplo(param) {
        try {
            // Implementa√ß√£o
        } catch (error) {
            console.error('‚ùå Erro espec√≠fico:', error);
            throw error;
        }
    }
}
```

### **Tratamento de Erros**
```javascript
// SEMPRE implementar try/catch com logs informativos
try {
    // Opera√ß√£o
    console.log('‚úÖ Opera√ß√£o realizada com sucesso');
} catch (error) {
    console.error('‚ùå Erro na opera√ß√£o:', error);
    // Fallback ou tratamento
}
```

### **Cache e Performance**
```javascript
// SEMPRE verificar cache antes de carregar
if (this.cache.has(key) && this.isCacheValid(cached)) {
    return this.cache.get(key);
}
```

## üìÅ **Estrutura de Arquivos**

### **Arquivos Principais**
- `saladeestudos.html` - Aplica√ß√£o principal (N√ÉO CRIAR NOVOS)
- `core-styles.css` - Estilos base do sistema
- `header_saladeestudos.html` - Cabe√ßalho din√¢mico
- `styles.css` - Estilos espec√≠ficos

### **Arquivos de Conte√∫do**
- Localizados em `PRO_Import_System/content/`
- Estrutura: `{curso}/{modulo}/aula-XX.html`
- **NUNCA** modificar diretamente - usar sistema de importa√ß√£o

## üö´ **Restri√ß√µes Importantes**

### **NUNCA FAZER:**
- Criar novos arquivos HTML principais
- Modificar estrutura do Firebase sem backup
- Quebrar compatibilidade com Shadow DOM
- Remover funcionalidades de isolamento
- Alterar URLs do Firebase Storage
- Criar depend√™ncias externas desnecess√°rias

### **SEMPRE VERIFICAR:**
- Compatibilidade com navegadores modernos
- Funcionamento do sistema de isolamento
- Integridade do cache
- Preserva√ß√£o de funcionalidades existentes

## üîç **Debugging e Monitoramento**

### **Logs Padr√£o**
```javascript
console.log('‚úÖ Sucesso:', mensagem);
console.warn('‚ö†Ô∏è Aviso:', mensagem);
console.error('‚ùå Erro:', mensagem);
console.log('üîÑ Processando:', mensagem);
console.log('üìã Cache:', mensagem);
```

### **M√©todos de Debug**
- `studyApp.getCacheStats()` - Estat√≠sticas do cache
- `studyApp.performHealthCheck()` - Health check do sistema
- `studyApp.getIsolationInfo()` - Status do isolamento

## üìö **Recursos de Refer√™ncia**

### **Documenta√ß√£o Interna**
- `plano-reengenharia-saladeestudos.md` - Plano completo de reengenharia
- `documentacao-fase2-isolamento.md` - Documenta√ß√£o do isolamento
- `relatorio-fase1-auditoria.md` - Auditoria inicial

### **APIs Dispon√≠veis**
- Firebase Auth, Firestore, Storage
- Sistema de isolamento CSS (Fases 1-5)
- ResourceCache e FallbackManager
- EventBridge para Shadow DOM

## üéØ **Objetivos de Qualidade**

1. **Performance**: Carregamento r√°pido e cache eficiente
2. **Robustez**: Fallbacks e tratamento de erros
3. **Manutenibilidade**: C√≥digo limpo e documentado
4. **Compatibilidade**: Funcionamento em todos os navegadores
5. **Acessibilidade**: Interface acess√≠vel e responsiva

---

**Lembre-se**: O PRO Concursos √© um sistema em produ√ß√£o usado por estudantes. Toda modifica√ß√£o deve ser feita com cuidado e sempre testada antes da implementa√ß√£o.